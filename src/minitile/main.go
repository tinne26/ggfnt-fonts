package main

import "os"
import "fmt"
import "image"

import "github.com/tinne26/ggfnt"
import "github.com/tinne26/ggfnt/builder"

func main() {
	// create font builder
	fmt.Print("creating new font builder\n")
	fontBuilder := builder.New()

	// add metadata
	fmt.Print("...adding metadata\n")
	err := fontBuilder.SetName("minitile")
	if err != nil { panic(err) }
	err = fontBuilder.SetFamily("minitile")
	if err != nil { panic(err) }
	err = fontBuilder.SetAuthor("tinne")
	if err != nil { panic(err) }
	err = fontBuilder.SetAbout("A 7x7 tile based font, uppercase only. Includes vertical metrics.")
	if err != nil { panic(err) }
	err = fontBuilder.SetFirstVerDate(ggfnt.Date{ Month: 7, Day: 12, Year: 2024 })
	if err != nil { panic(err) }
	fontBuilder.SetVersion(0, 1)

	// set metrics
	fmt.Print("...setting metrics\n")
	fontBuilder.SetAscent(6)
	fontBuilder.SetExtraAscent(0)
	fontBuilder.SetUppercaseAscent(5)
	fontBuilder.SetMidlineAscent(0)
	fontBuilder.SetDescent(1)
	fontBuilder.SetHorzInterspacing(1)
	fontBuilder.SetLineGap(1)

	// more metrics for vertical layout and mono-width
	fontBuilder.SetMonoWidth(7)
	fontBuilder.SetVertLayoutUsed(true)
	fontBuilder.SetVertInterspacing(1)
	err = fontBuilder.SetVertLineWidth(7)
	if err != nil { panic(err) }
	err = fontBuilder.SetVertLineGap(1)
	if err != nil { panic(err) }

	err = fontBuilder.GetMetricsStatus()
	if err != nil { panic(err) }

	// add notdef as the glyph zero
	notdefUID, err := fontBuilder.AddGlyph(notdef)
	if err != nil { panic(err) }
	err = fontBuilder.SetGlyphName(notdefUID, "notdef")
	if err != nil { panic(err) }
	err = fontBuilder.Map('\uE000', notdefUID)
	if err != nil { panic(err) }

	// add glyphs and map them
	runeToUID := make(map[rune]uint64, 128)
	addRuneRange(fontBuilder, runeToUID, ' ', '`') // ascii table before lowercase
	addRuneRange(fontBuilder, runeToUID, '{', '~') // ascii table after lowercase
	addRunes(fontBuilder, runeToUID, '¡', '¿', '´', '¨', '·', '¦', 'º', '…', '—', '¬') // additional symbols
	addRunes(fontBuilder, runeToUID, 'Ñ', 'Ç') // spanish letters

	// ensure that all bitmaps are being used
	for codePoint, _ := range pkgBitmaps {
		_, found := runeToUID[codePoint]
		if !found { panic("missing code point '" + string(codePoint) + "'") }
	}

	// show size
	font, err := fontBuilder.Build()
	if err != nil { panic(err) }
	err = font.Validate(ggfnt.FmtDefault)
	if err != nil { panic(err) }
	fmt.Printf("...raw size of %d bytes\n", font.RawSize())

	// export
	const FileName = "minitile-6d1-v0p1.ggfnt"
	file, err := os.Create(FileName)
	if err != nil { panic(err) }
	fmt.Printf("...exporting %s\n", FileName)
	err = fontBuilder.Export(file)
	if err != nil {
		_ = file.Close()
		_ = os.Remove(FileName)
		panic(err)
	}
	
	// close file
	fmt.Print("...closing exported file\n")
	err = file.Close()
	if err != nil { panic(err) }
}

func addRuneRange(fontBuilder *builder.Font, codePointsMap map[rune]uint64, start, end rune) {
	for codePoint := start; codePoint <= end; codePoint++ {
		bitmap, found := pkgBitmaps[rune(codePoint)]
		if !found { panic("missing bitmap for '" + string(codePoint) + "'") }
		uid, err := fontBuilder.AddGlyph(bitmap)
		if err != nil { panic(err) }
		err = fontBuilder.Map(codePoint, uid)
		if err != nil { panic(err) }
		err = fontBuilder.SetGlyphPlacement(uid, ggfnt.GlyphPlacement{
			Advance: 7,
			TopAdvance: 3,
			BottomAdvance: 4,
			HorzCenter: 3,
		})
		if err != nil { panic(err) }
		codePointsMap[codePoint] = uid
	}
}

func addRunes(fontBuilder *builder.Font, codePointsMap map[rune]uint64, runes ...rune) {
	for _, codePoint := range runes {
		bitmap, found := pkgBitmaps[rune(codePoint)]
		if !found { panic("missing bitmap for '" + string(codePoint) + "'") }
		uid, err := fontBuilder.AddGlyph(bitmap) // *
		if err != nil { panic(err) }
		err = fontBuilder.Map(codePoint, uid)
		if err != nil { panic(err) }
		err = fontBuilder.SetGlyphPlacement(uid, ggfnt.GlyphPlacement{
			Advance: 7,
			TopAdvance: 3,
			BottomAdvance: 4,
			HorzCenter: 3,
		})
		if err != nil { panic(err) }
		codePointsMap[codePoint] = uid
	}
}

// helper for mask creation
func rawMask(mask []byte) *image.Alpha {
	img := image.NewAlpha(image.Rect(0, -6, 7, 1))
	copy(img.Pix, mask)
	return img
}

var notdef = rawMask([]byte{
	0, 1, 1, 1, 1, 1, 0,
	0, 1, 0, 0, 0, 1, 0,
	0, 1, 0, 0, 0, 1, 0,
	0, 1, 0, 0, 0, 1, 0,
	0, 1, 0, 0, 0, 1, 0,
	0, 1, 0, 0, 0, 1, 0,
	0, 1, 1, 1, 1, 1, 0,
})

var pkgBitmaps = map[rune]*image.Alpha{
	// --- ascii table ---
	' ': rawMask([]byte{
		// 0, 0, 0, 0, 0, 0, 0,
		// 0, 0, 0, 0, 0, 0, 0,
		// 0, 0, 0, 0, 0, 0, 0,
		// 0, 0, 0, 0, 0, 0, 0,
		// 0, 0, 0, 0, 0, 0, 0,
		// 0, 0, 0, 0, 0, 0, 0,
		// 0, 0, 0, 0, 0, 0, 0,
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'!': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'"': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'#': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 0, 1, 0, 1, 1,
		1, 0, 0, 0, 0, 0, 1,
		1, 1, 0, 1, 0, 1, 1,
		1, 0, 0, 0, 0, 0, 1,
		1, 1, 0, 1, 0, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'$': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 0, 0, 0, 1, 1,
		1, 0, 1, 0, 1, 1, 1,
		1, 1, 0, 0, 0, 1, 1,
		1, 1, 1, 0, 1, 0, 1,
		1, 1, 0, 0, 0, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'%': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 1, 1, 0, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 0, 1, 1, 1, 1,
		1, 1, 0, 1, 0, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'&': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 0, 0, 1, 1, 1,
		1, 0, 1, 1, 0, 0, 1,
		1, 0, 0, 0, 0, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'\'': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'(': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 1, 1, 0, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 1, 0, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	')': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 0, 1, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 0, 1, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'*': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'+': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 0, 0, 0, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	',': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 0, 1, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'-': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 0, 0, 0, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'.': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'/': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 1, 1, 0, 1, 1,
		1, 1, 1, 1, 0, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 0, 1, 1, 1, 1,
		1, 1, 0, 1, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'0': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'1': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 0, 0, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 0, 0, 0, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'2': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 0, 0, 1, 1, 1,
		1, 1, 1, 1, 0, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 0, 1, 1, 1, 1,
		1, 1, 0, 0, 0, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'3': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 0, 0, 0, 1, 1,
		1, 1, 1, 1, 0, 1, 1,
		1, 1, 1, 0, 0, 1, 1,
		1, 1, 1, 1, 0, 1, 1,
		1, 1, 0, 0, 0, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'4': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 0, 0, 0, 1, 1,
		1, 1, 1, 1, 0, 1, 1,
		1, 1, 1, 1, 0, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'5': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 0, 0, 0, 1, 1,
		1, 1, 0, 1, 1, 1, 1,
		1, 1, 0, 0, 1, 1, 1,
		1, 1, 1, 1, 0, 1, 1,
		1, 1, 0, 0, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'6': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 0, 0, 0, 1, 1,
		1, 1, 0, 1, 1, 1, 1,
		1, 1, 0, 0, 0, 1, 1,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 0, 0, 0, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'7': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 0, 0, 0, 1, 1,
		1, 1, 1, 1, 0, 1, 1,
		1, 1, 1, 1, 0, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'8': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 0, 0, 0, 1, 1,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 0, 0, 0, 1, 1,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 0, 0, 0, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'9': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 0, 0, 0, 1, 1,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 0, 0, 0, 1, 1,
		1, 1, 1, 1, 0, 1, 1,
		1, 1, 1, 1, 0, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	':': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	';': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 0, 1, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'<': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 0, 1, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'=': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 0, 0, 0, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 0, 0, 0, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'>': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 1, 0, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'?': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 0, 0, 0, 1, 1,
		1, 1, 1, 1, 0, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'@': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 0, 0, 0, 1, 1,
		1, 0, 1, 1, 0, 0, 1,
		1, 0, 1, 0, 0, 0, 1,
		1, 0, 1, 1, 1, 1, 1,
		1, 1, 0, 0, 0, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'A': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 0, 0, 0, 1, 1,
		1, 1, 0, 1, 0, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
		// 0, 1, 1, 1, 1, 1, 0,
		// 1, 1, 1, 0, 1, 1, 1,
		// 1, 1, 0, 1, 0, 1, 1,
		// 1, 0, 1, 1, 1, 0, 1,
		// 1, 0, 0, 0, 0, 0, 1,
		// 1, 0, 1, 1, 1, 0, 1,
		// 0, 1, 1, 1, 1, 1, 0,
	}),
	'B': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 0, 0, 1, 1, 1,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 0, 0, 1, 1, 1,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 0, 0, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'C': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 1, 0, 0, 1, 1,
		1, 1, 0, 1, 1, 1, 1,
		1, 1, 0, 1, 1, 1, 1,
		1, 1, 0, 1, 1, 1, 1,
		1, 1, 1, 0, 0, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'Ç': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 1, 0, 0, 1, 1,
		1, 1, 0, 1, 1, 1, 1,
		1, 1, 0, 1, 1, 1, 1,
		1, 1, 0, 1, 1, 1, 1,
		1, 1, 1, 0, 0, 1, 1,
		0, 1, 1, 0, 1, 1, 0,
	}),
	'D': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 0, 0, 1, 1, 1,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 0, 0, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'E': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 0, 0, 0, 1, 1,
		1, 1, 0, 1, 1, 1, 1,
		1, 1, 0, 0, 1, 1, 1,
		1, 1, 0, 1, 1, 1, 1,
		1, 1, 0, 0, 0, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'F': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 0, 0, 0, 1, 1,
		1, 1, 0, 1, 1, 1, 1,
		1, 1, 0, 0, 0, 1, 1,
		1, 1, 0, 1, 1, 1, 1,
		1, 1, 0, 1, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'G': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 0, 0, 0, 1, 1,
		1, 0, 1, 1, 1, 1, 1,
		1, 0, 1, 1, 0, 0, 1,
		1, 0, 1, 1, 1, 0, 1,
		1, 1, 0, 0, 0, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'H': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 0, 0, 0, 1, 1,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 0, 1, 0, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'I': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 0, 0, 0, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 0, 0, 0, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'J': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 1, 0, 0, 1, 1,
		1, 1, 1, 1, 0, 1, 1,
		1, 1, 1, 1, 0, 1, 1,
		1, 0, 1, 1, 0, 1, 1,
		1, 1, 0, 0, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'K': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 0, 0, 1, 1, 1,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 0, 1, 0, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'L': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 0, 1, 1, 1, 1,
		1, 1, 0, 1, 1, 1, 1,
		1, 1, 0, 1, 1, 1, 1,
		1, 1, 0, 1, 1, 1, 1,
		1, 1, 0, 0, 0, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'M': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 0, 1, 1, 1, 0, 1,
		1, 0, 0, 1, 0, 0, 1,
		1, 0, 1, 0, 1, 0, 1,
		1, 0, 1, 1, 1, 0, 1,
		1, 0, 1, 1, 1, 0, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'N': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 0, 1, 1, 1, 0, 1,
		1, 0, 0, 1, 1, 0, 1,
		1, 0, 1, 0, 1, 0, 1,
		1, 0, 1, 1, 0, 0, 1,
		1, 0, 1, 1, 1, 0, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'Ñ': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 0, 0, 0, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		1, 0, 0, 1, 1, 0, 1,
		1, 0, 1, 0, 1, 0, 1,
		1, 0, 1, 1, 0, 0, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'O': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 0, 0, 0, 1, 1,
		1, 0, 1, 1, 1, 0, 1,
		1, 0, 1, 1, 1, 0, 1,
		1, 0, 1, 1, 1, 0, 1,
		1, 1, 0, 0, 0, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'P': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 0, 0, 0, 1, 1,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 0, 0, 0, 1, 1,
		1, 1, 0, 1, 1, 1, 1,
		1, 1, 0, 1, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'Q': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 0, 0, 0, 1, 1,
		1, 0, 1, 1, 1, 0, 1,
		1, 0, 1, 1, 0, 0, 1,
		1, 1, 0, 0, 0, 0, 1,
		1, 1, 1, 1, 0, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'R': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 0, 0, 1, 1, 1,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 0, 0, 1, 1, 1,
		1, 1, 0, 1, 0, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'S': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 0, 0, 0, 1, 1,
		1, 0, 1, 1, 1, 1, 1,
		1, 1, 0, 0, 0, 1, 1,
		1, 1, 1, 1, 1, 0, 1,
		1, 1, 0, 0, 0, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'T': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 0, 0, 0, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'U': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 0, 0, 0, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'V': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 0, 1, 1, 1, 0, 1,
		1, 0, 1, 1, 1, 0, 1,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'W': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 0, 1, 1, 1, 0, 1,
		1, 0, 1, 0, 1, 0, 1,
		1, 0, 1, 0, 1, 0, 1,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 0, 1, 0, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'X': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 0, 1, 0, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'Y': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'Z': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 0, 0, 0, 1, 1,
		1, 1, 1, 1, 0, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 0, 1, 1, 1, 1,
		1, 1, 0, 0, 0, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'[': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 1, 0, 0, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 0, 0, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'\\': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 0, 1, 1, 1, 1,
		1, 1, 0, 1, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 1, 0, 1, 1,
		1, 1, 1, 1, 0, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	']': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 0, 0, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 0, 0, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'^': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'_': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 0, 0, 0, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'`': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 0, 1, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'´': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 1, 1, 0, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'{': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 1, 1, 0, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 0, 0, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 1, 0, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'|': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'}': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 0, 1, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 0, 0, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 0, 1, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'~': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 0, 1, 1, 1, 1,
		1, 0, 1, 0, 1, 0, 1,
		1, 1, 1, 1, 0, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'¡': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'¿': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 0, 1, 1, 1, 1,
		1, 1, 0, 0, 0, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'¨': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'·': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'¦': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'º': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 0, 1, 0, 1, 1,
		1, 1, 1, 0, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'…': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		1, 0, 1, 0, 1, 0, 1,
		1, 1, 1, 1, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'—': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		1, 0, 0, 0, 0, 0, 1,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
	'¬': rawMask([]byte{
		0, 1, 1, 1, 1, 1, 0,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		1, 1, 0, 0, 0, 1, 1,
		1, 1, 1, 1, 0, 1, 1,
		1, 1, 1, 1, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 0,
	}),
}
